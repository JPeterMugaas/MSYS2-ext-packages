cmake_minimum_required (VERSION 2.8.4)
project (libsvgtiny)
include(GNUInstallDirs)
include(FindPkgConfig)
enable_testing()
include( CTest )

#Obligitory version and copyright for pkg-config file and version info
#as well as possibly, automated installers.
set(SVGTINY_COMPONENT_NAME "svgtiny")
set(SVGTINY_AUTHOR "John-Mark Bell <jmb@netsurf-browser.org>")
set(SVGTINY_COPYRIGHT "Copyright 2009-2015 John-Mark Bell <jmb@netsurf-browser.org>")
set(SVGTINY_DESCRIPTION "SVG Tiny 1.1 rendering library")
set(SVGTINY_VERSION_MAJOR 0)
set(SVGTINY_VERSION_MINOR 1)
set(SVGTINY_VERSION_PATCH 6)
set(SVGTINY_SOVERSION ${SVGTINY_VERSION_MAJOR}.${SVGTINY_VERSION_MINOR}.${SVGTINY_VERSION_PATCH})

#Do not prefix BUILD_SHARED_LIBS and BUILD_STATIC_LIBS because those are standard cmake options
#We only put them in the menu for convenience.
option(BUILD_SHARED_LIBS "Build shared libraries" ON)
option(BUILD_STATIC_LIBS "Build static libraries" ON)
option(SVGTINY_WITH_PKGCONFIG_SUPPORT "Generate and install .pc files" ON)

if(CMAKE_COMPILER_IS_GNUCC)
set(SVGTINY_WARNFLAGS -Wall -W -Wundef -Wpointer-arith -Wcast-align
        -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes 
        -Wmissing-declarations -Wnested-externs)
endif(CMAKE_COMPILER_IS_GNUCC)

set(SVGTINY_BUILD_DIR ${CMAKE_CURRENT_BINARY_DIR})
set(SVGTINY_ADDITIONAL_C_FILES 
   ${CMAKE_CURRENT_BINARY_DIR}/autogenerated_colors.c
   ${CMAKE_SOURCE_DIR}/src/svgtiny.c 
   ${CMAKE_SOURCE_DIR}/src/svgtiny_gradient.c
   ${CMAKE_SOURCE_DIR}/src/svgtiny_list.c)
set(SVGTINY_PUBLIC_HEADER_FILES
   include/svgtiny.h)

include_directories(${CMAKE_SOURCE_DIR}/src ${CMAKE_SOURCE_DIR}/include)
# setup any additional libs required by this.
set(SVGTINY_ADDITIONAL_LIBS "")
set(SVGTINY_ADDITIONAL_DIRS "${CMAKE_CURRENT_BINARY_DIR}")
set(SVGTINY_ADDITIONAL_DEFS "")

# From: https://gitlab.kitware.com/cmake/community/wikis/contrib/macros/TestInline
# Inspired from /usr/share/autoconf/autoconf/c.m4
# I put it here to replace the GCCISM inline="__inline__"
set(TEST_C "/* Test source lifted from /usr/share/autoconf/autoconf/c.m4 */
typedef int foo_t;
static inline foo_t static_foo(){return 0;}
foo_t foo(){return 0;}
int main(int argc, char *argv[]){return 0;}")
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/test_inline.c "${TEST_C}")
FOREACH(KEYWORD "inline" "__inline__" "__inline")
   IF(NOT DEFINED C_INLINE)
     TRY_COMPILE(C_HAS_${KEYWORD} "${CMAKE_CURRENT_BINARY_DIR}"
       "${CMAKE_CURRENT_BINARY_DIR}/test_inline.c"
       COMPILE_DEFINITIONS "-Dinline=${KEYWORD}")
     IF(C_HAS_${KEYWORD})
       SET(C_INLINE TRUE)
       ADD_DEFINITIONS("-Dinline=${KEYWORD}")
     ENDIF(C_HAS_${KEYWORD})
   ENDIF(NOT DEFINED C_INLINE)
ENDFOREACH(KEYWORD)
IF(NOT DEFINED C_INLINE)
   ADD_DEFINITIONS("-Dinline=")
ENDIF(NOT DEFINED C_INLINE)
file(REMOVE ${CMAKE_CURRENT_BINARY_DIR}/test_inline.c)

#FindPython module was introduced in CMake 3.11
#flatten with the variable name Python3_EXECUTABLE
#if (${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION} GREATER 3.12)
#  include(FindPython3)
#  if (NOT Python3_FOUND)
#    message(FATAL_ERROR "Python3 is required")
#  endif(NOT Python3_FOUND)
#else()
#  find_program(Python3_EXECUTABLE python3)
#  if(NOT Python3_EXECUTABLE)
#    message(FATAL_ERROR "Python3 is required")
#  endif(NOT Python3_EXECUTABLE)
#endif()
#execute_process(WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
#  COMMAND ${Python3_EXECUTABLE} src/select/select_generator.py)

if(PKG_CONFIG_FOUND)
    pkg_check_modules(libdom REQUIRED libdom)
    list(APPEND SVGTINY_ADDITIONAL_DIRS ${libdom_INCLUDEDIR} ${libdom_INCLUDEDIR}/dom)
    list(APPEND SVGTINY_ADDITIONAL_LIBS ${libdom_LIBRARIES})
else()
    find_library(dom SVGTINY_libdom_LIB)
    if (SVGTINY_libdom_LIB)
      list(APPEND SVGTINY_ADDITIONAL_LIBS ${SVGTINY_libdom_LIB})
    else()
      message(FATAL_ERROR "dom not found")
    endif(SVGTINY_libdom_LIB)
endif(PKG_CONFIG_FOUND)

if(PKG_CONFIG_FOUND)
    pkg_check_modules(libwapcaplet REQUIRED libwapcaplet)
    list(APPEND SVGTINY_ADDITIONAL_DIRS ${libwapcaplet_INCLUDEDIR})
    list(APPEND SVGTINY_ADDITIONAL_LIBS ${libwapcaplet_LIBRARIES})
else()
    find_library(wapcaplet SVGTINY_libwapcaplet_LIB)
    if (SVGTINY_libwapcaplet_LIB)
      list(APPEND SVGTINY_ADDITIONAL_LIBS ${SVGTINY_libwapcaplet_LIB})
    else()
      message(FATAL_ERROR "wapcaple not found")
    endif(SVGTINY_libwapcaplet_LIB)
endif(PKG_CONFIG_FOUND)

find_program(GPERF_EXECUTABLE gperf DOC "path to the gperf executable")
mark_as_advanced(GPERF_EXECUTABLE)
if(NOT GPERF_EXECUTABLE)
  message(FATAL_EFFOR "gpref not found.")
endif(NOT GPERF_EXECUTABLE)

execute_process(COMMAND ${GPERF_EXECUTABLE} ${CMAKE_SOURCE_DIR}/src/colors.gperf
    OUTPUT_VARIABLE SVGTINY_COLORS_CONTENT)
#Squash "error: no previous declaration for 'svgtiny_color_lookup'"
#What the Makefile author was doing was inserting the word "static "
#before the text " const struct svgtiny_named_color *" in the first
#occurance ONLY.  I do not want to use SED in this makefile because
#not systems have this by default.
#
#To do this insertation, I converted the code at
# https://github.com/toeb/cmakepp/blob/master/cmake/string/string_replace_first.cmake
#into something that is done without a function with hard-coded values
#since a function can NOT return a value in CMake (at least not without hacks.
#I then do a replacement instead of an insert.

set(SVGTINY_SEARCH_STR "const struct svgtiny_named_color *")
set(SVGTINY_REPLACE_STR "static const struct svgtiny_named_color *")
string(FIND "${SVGTINY_COLORS_CONTENT}" "${SVGTINY_SEARCH_STR}" SVGTINY_index)
if(${SVGTINY_index} LESS 0 OR "${SVGTINY_SEARCH_STR}_" STREQUAL "_")
else()
  string(LENGTH "${SVGTINY_SEARCH_STR}" SVGTINY_search_length)
  string(SUBSTRING "${SVGTINY_COLORS_CONTENT}" 0 "${SVGTINY_index}" SVGTINY_part1)
  math(EXPR SVGTINY_index "${SVGTINY_index} + ${SVGTINY_search_length}")
  string(SUBSTRING "${SVGTINY_COLORS_CONTENT}" "${SVGTINY_index}" -1 SVGTINY_part2)
  set(SVGTINY_COLORS_CONTENT "${SVGTINY_part1}${SVGTINY_REPLACE_STR}${SVGTINY_part2}")
endif()

#string_replace_first(SVGTINY_COLORS_CONTENT ${CMAKE_CURRENT_BINARY_DIR}/autogenerated_colors.c
# "const struct svgtiny_named_color *" "static const struct svgtiny_named_color *")
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/autogenerated_colors.c "${SVGTINY_COLORS_CONTENT}")

if(BUILD_SHARED_LIBS)
   if(CMAKE_RC_COMPILER)
      # Make .rc file  
      set(SVGTINY_RC_CONTENTS "1 VERSIONINFO
FILEVERSION     ${SVGTINY_VERSION_MAJOR},${SVGTINY_VERSION_MINOR},${SVGTINY_VERSION_PATCH},0
PRODUCTVERSION  ${SVGTINY_VERSION_MAJOR},${SVGTINY_VERSION_MINOR},${SVGTINY_VERSION_PATCH},0
BEGIN
  BLOCK \"StringFileInfo\"
  BEGIN
    BLOCK \"040904E4\"
    BEGIN
      VALUE \"CompanyName\", \"${SVGTINY_AUTHOR}\"
      VALUE \"FileDescription\", \"${SVGTINY_DESCRIPTION}\"
      VALUE \"FileVersion\", \"${SVGTINY_VERSION_MAJOR}.${SVGTINY_VERSION_MINOR}.${SVGTINY_VERSION_PATCH}\"
      VALUE \"InternalName\", \"${CMAKE_SHARED_MODULE_PREFIX}${SVGTINY_COMPONENT_NAME}\"
      VALUE \"LegalCopyright\", \"${SVGTINY_COPYRIGHT}\"
      VALUE \"OriginalFilename\", \"${CMAKE_SHARED_MODULE_PREFIX}${SVGTINY_COMPONENT_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX}\"
      VALUE \"ProductName\", \"${SVGTINY_COMPONENT_NAME}\"
      VALUE \"ProductVersion\", \"${SVGTINY_VERSION_MAJOR}.${SVGTINY_VERSION_MINOR}.${SVGTINY_VERSION_PATCH}\"
    END
  END
  BLOCK \"VarFileInfo\"
  BEGIN
    VALUE \"Translation\", 0x409, 1252
  END
END")
    FILE(WRITE ${SVGTINY_BUILD_DIR}/lib${SVGTINY_COMPONENT_NAME}.rc "${SVGTINY_RC_CONTENTS}")
    add_library(lib_SVGTINY_shared SHARED ${SVGTINY_PUBLIC_HEADER_FILES} ${SVGTINY_ADDITIONAL_C_FILES} ${SVGTINY_BUILD_DIR}/lib${SVGTINY_COMPONENT_NAME}.rc)
  else()
    add_library(lib_SVGTINY_shared SHARED ${SVGTINY_PUBLIC_HEADER_FILES} ${SVGTINY_ADDITIONAL_C_FILES} SOVERSION ${SVGTINY_SOVERSION})
  endif()
  set_target_properties(lib_SVGTINY_shared PROPERTIES OUTPUT_NAME ${SVGTINY_COMPONENT_NAME})
  if(SVGTINY_ADDITIONAL_LIBS)
    target_link_libraries(lib_SVGTINY_shared PUBLIC ${SVGTINY_ADDITIONAL_LIBS}) 
  endif(SVGTINY_ADDITIONAL_LIBS)
  if(SVGTINY_ADDITIONAL_DIRS)
    target_include_directories(lib_SVGTINY_shared PUBLIC ${SVGTINY_ADDITIONAL_DIRS})
  endif(SVGTINY_ADDITIONAL_DIRS)
  if(SVGTINY_ADDITIONAL_DEFS)
    target_include_directories(lib_SVGTINY_shared PUBLIC ${SVGTINY_ADDITIONAL_DEFS})
  endif(SVGTINY_ADDITIONAL_DEFS)
  if(CMAKE_COMPILER_IS_GNUCC)
    target_compile_options(lib_SVGTINY_shared PRIVATE ${SVGTINY_WARNFLAGS})
  endif(CMAKE_COMPILER_IS_GNUCC)
  install(TARGETS lib_SVGTINY_shared
      RUNTIME DESTINATION bin
      LIBRARY DESTINATION lib
      ARCHIVE DESTINATION lib)
endif(BUILD_SHARED_LIBS)
if(BUILD_STATIC_LIBS)
  add_library(lib_SVGTINY_static STATIC ${SVGTINY_PUBLIC_HEADER_FILES} ${SVGTINY_ADDITIONAL_C_FILES})
  set_target_properties(lib_SVGTINY_static PROPERTIES OUTPUT_NAME ${SVGTINY_COMPONENT_NAME})
  if(SVGTINY_ADDITIONAL_LIBS)
    target_link_libraries(lib_SVGTINY_static PUBLIC ${SVGTINY_ADDITIONAL_LIBS}) 
  endif(SVGTINY_ADDITIONAL_LIBS)
  if(SVGTINY_ADDITIONAL_DIRS)
    target_include_directories(lib_SVGTINY_static PUBLIC ${SVGTINY_ADDITIONAL_DIRS})
  endif(SVGTINY_ADDITIONAL_DIRS)
  if(SVGTINY_ADDITIONAL_DEFS)
    target_include_directories(lib_SVGTINY_static PUBLIC ${SVGTINY_ADDITIONAL_DEFS})
  endif(SVGTINY_ADDITIONAL_DEFS)
  if(CMAKE_COMPILER_IS_GNUCC)
    target_compile_options(lib_SVGTINY_static PRIVATE ${SVGTINY_WARNFLAGS})
  endif(CMAKE_COMPILER_IS_GNUCC)
  install(TARGETS lib_SVGTINY_static
      RUNTIME DESTINATION bin
      LIBRARY DESTINATION lib
      ARCHIVE DESTINATION lib)
endif(BUILD_STATIC_LIBS)

#from: https://cmake.org/pipermail/cmake/2010-October/040246.html
#This installs the headers into our hierarchy in the include file.
foreach(SVGTINY_HEADER ${SVGTINY_PUBLIC_HEADER_FILES})
   string(REGEX MATCH "(.*)[/\\]" SVGTINY_DIR ${SVGTINY_HEADER})
   install(FILES ${SVGTINY_HEADER} DESTINATION ${SVGTINY_DIR})
endforeach(SVGTINY_HEADER ${SVGTINY_PUBLIC_HEADER_FILES})

if(SVGTINY_WITH_PKGCONFIG_SUPPORT)
  set(SVGTINY_PC ${SVGTINY_BUILD_DIR}/lib${SVGTINY_COMPONENT_NAME}.pc)

  # This stuff is necessary to ensure that the dependency list
  # in our .pc file is in the proper format
#Make pkg-config
  set(SVGTINY_EXC "${CMAKE_INSTALL_PREFIX}")
  set(SVGTINY_INC "${CMAKE_INSTALL_FULL_INCLUDEDIR}")
  set(SVGTINY_LIB "${CMAKE_INSTALL_FULL_LIBDIR}")
  if("${SVGTINY_EXC}" STREQUAL "${CMAKE_INSTALL_PREFIX}")
    set(SVGTINY_EXC "\${prefix}")
  endif()
  if ("${SVGTINY_INC}" STREQUAL "${CMAKE_INSTALL_PREFIX}/include")
    set(SVGTINY_INC "\${prefix}/include")
  endif()
  if ("${SVGTINY_LIB}" STREQUAL "${CMAKE_INSTALL_PREFIX}/lib")
    set(SVGTINY_LIB "\${exec_prefix}/lib")
  endif()
  set(SVGTINY_DEPS "")
  foreach(SVGTINY_LIB_DEP ${SVGTINY_LIB_DEPEND_LIBS})
    set(SVGTINY_DEPS "${SVGTINY_DEPS} -l${SVGTINY_LIB_DEP}")
  endforeach(SVGTINY_LIB_DEP)

  set(SVGTINY_PKGCONFIG_CONTENTS "prefix=${CMAKE_INSTALL_PREFIX}
exec_prefix=${SVGTINY_EXC}
libdir=${SVGTINY_LIB}
includedir=${SVGTINY_INC}

Name: lib${SVGTINY_COMPONENT_NAME}
Description: ${SVGTINY_DESCRIPTION}
URL: http://www.netsurf-browser.org/projects/${SVGTINY_COMPONENT_NAME}/
Version: ${SVGTINY_SOVERSION}
Requires: libdom
Cflags: -I\${includedir}
Libs: -L\${libdir} -l${SVGTINY_COMPONENT_NAME}
Libs.private: ${SVGTINY_DEPS}
")
  file(WRITE ${SVGTINY_PC} ${SVGTINY_PKGCONFIG_CONTENTS})
  install(FILES ${SVGTINY_PC} DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
endif(SVGTINY_WITH_PKGCONFIG_SUPPORT)

